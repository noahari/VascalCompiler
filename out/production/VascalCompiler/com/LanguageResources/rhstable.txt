   1:   <program>                ::= program identifier LPAREN <identifier-list> RPAREN SEMICOLON <declarations> <sub-declarations> <compound-statement>
   2:   <identifier-list>        ::= identifier <identifier-list-tail> 
   3:   <identifier-list-tail>   ::= COMMA identifier <identifier-list-tail> 
   4:                            ::=  
   5:   <declarations>           ::= var <declaration-list> 
   6:                            ::=  
   7:   <declaration-list>       ::= <identifier-list> COLON <type> SEMICOLON <declaration-list-tail>
   8:   <declaration-list-tail>  ::= <identifier-list> COLON <type> SEMICOLON <declaration-list-tail>
   9:                            ::=  
  10:   <type>                   ::= <standard-type> 
  11:                            ::= <array-type> 
  12:   <standard-type>          ::= integer 
  13:                            ::= real 
  14:   <array-type>             ::= array LBRACKET intconstant DOUBLEDOT intconstant RBRACKET of <standard-type>
  15:   <sub-declarations>       ::= <subprogram-declaration> <sub-declarations>
  16:                            ::=  
  17:   <subprogram-declaration> ::= <subprogram-head> <declarations> <compound-statement>
  18:   <subprogram-head>        ::= function identifier <arguments> COLON result <standard-type> SEMICOLON
  19:                            ::= procedure identifier <arguments> SEMICOLON 
  20:   <arguments>              ::= LPAREN <parameter-list> RPAREN 
  21:                            ::=  
  22:   <parameter-list>         ::= <identifier-list> COLON <type> <parameter-list-tail>
  23:   <parameter-list-tail>    ::= SEMICOLON <identifier-list> COLON <type> <parameter-list-tail>
  24:                            ::=  
  25:   <compound-statement>     ::= begin <statement-list> end 
  26:   <statement-list>         ::= <statement> <statement-list-tail> 
  27:   <statement-list-tail>    ::= SEMICOLON <statement> <statement-list-tail> 
  28:                            ::=  
  28:   <statement>              ::= <elementary-statement> 
  30:                            ::= if <expression> then <statement> <else-clause>
  31:                            ::= while <expression> do <statement>
  32:   <else-clause>            ::= else <statement> 
  33:                            ::=  
  34:   <elementary-statement>   ::= identifier <es-tail> 
  35:                            ::= <compound-statement> 
  36:   <es-tail>                ::= <subscript> assignop <expression> 
  37:                            ::= <parameters> 
  38:   <subscript>              ::= LBRACKET <expression> RBRACKET 
  39:                            ::=  
  40:   <parameters>             ::= LPAREN <expression-list> RPAREN 
  41:                            ::=  
  42:   <expression-list>        ::= <expression> <expression-list-tail> 
  43:   <expression-list-tail>   ::= COMMA <expression> <expression-list-tail> 
  44:                            ::=  
  45:   <expression>             ::= <simple-expression> <expression-tail> 
  46:   <expression-tail>        ::= relop <simple-expression> 
  47:                            ::=  
  48:   <simple-expression>      ::= <term> <simple-expression-tail> 
  49:                            ::= <sign> <term> <simple-expression-tail>
  50:   <simple-expression-tail> ::= addop <term> <simple-expression-tail>
  51:                            ::=  
  52:   <term>                   ::= <factor> <term-tail> 
  53:   <term-tail>              ::= mulop <factor> <term-tail> 
  54:                            ::=  
  55:   <factor>                 ::= identifier <factor-tail> 
  56:                            ::= <constant> 
  57:                            ::= LPAREN <expression> RPAREN 
  58:                            ::= not <factor> 
  59:   <factor-tail>            ::= <actual-parameters> 
  60:                            ::= <subscript> 
  61:   <actual-parameters>      ::= LPAREN <expression-list> RPAREN 
  62:                            ::=  
  63:   <sign>                   ::= unaryplus 
  64:                            ::= unaryminus 
  65:   <Goal>                   ::= <program> endmarker
  66:   <constant>               ::= intconstant
  67:                            ::= realconstant
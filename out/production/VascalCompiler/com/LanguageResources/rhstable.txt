   1:   <program>                ::= program identifier #13 LPAREN <identifier-list> RPAREN #9 SEMICOLON <declarations> <sub-declarations> #56 <compound-statement> #55
   2:   <identifier-list>        ::= identifier #13 <identifier-list-tail>
   3:   <identifier-list-tail>   ::= COMMA identifier #13 <identifier-list-tail>
   4:                            ::=  
   5:   <declarations>           ::= var #1 <declaration-list> #2
   6:                            ::=  
   7:   <declaration-list>       ::= <identifier-list> COLON <type> #3 SEMICOLON <declaration-list-tail>
   8:   <declaration-list-tail>  ::= <identifier-list> COLON <type> #3 SEMICOLON <declaration-list-tail>
   9:                            ::=  
  10:   <type>                   ::= <standard-type>
  11:                            ::= <array-type>
  12:   <standard-type>          ::= integer #4
  13:                            ::= real #4
  14:   <array-type>             ::= #6 array LBRACKET intconstant #7 DOUBLEDOT intconstant #7 RBRACKET of <standard-type>
  15:   <sub-declarations>       ::= <subprogram-declaration> <sub-declarations>
  16:                            ::=  
  17:   <subprogram-declaration> ::= #1 <subprogram-head> <declarations> #5 <compound-statement> #11
  18:   <subprogram-head>        ::= function identifier #15 <arguments> COLON result <standard-type> SEMICOLON #16
  19:                            ::= procedure identifier #17 <arguments> SEMICOLON
  20:   <arguments>              ::= LPAREN #19 <parameter-list> RPAREN #20
  21:                            ::=  
  22:   <parameter-list>         ::= <identifier-list> COLON <type> #21 <parameter-list-tail>
  23:   <parameter-list-tail>    ::= SEMICOLON <identifier-list> COLON <type> #21 <parameter-list-tail>
  24:                            ::=  
  25:   <compound-statement>     ::= begin <statement-list> end
  26:   <statement-list>         ::= <statement> <statement-list-tail>
  27:   <statement-list-tail>    ::= SEMICOLON <statement> <statement-list-tail>
  28:                            ::=  
  28:   <statement>              ::= <elementary-statement>
  30:                            ::= if <expression> #22 then <statement> <else-clause>
  31:                            ::= while #24 <expression> #25 do <statement> #26
  32:   <else-clause>            ::= else #27 <statement> #28
  33:                            ::= #29
  34:   <elementary-statement>   ::= identifier #30 <es-tail>
  35:                            ::= <compound-statement>
  36:   <es-tail>                ::= #53 <subscript> assignop <expression> #31
  37:                            ::= #54 <parameters>
  38:   <subscript>              ::= #32 LBRACKET <expression> RBRACKET #33
  39:                            ::= #34
  40:   <parameters>             ::= #35 LPAREN <expression-list> RPAREN #51
  41:                            ::= #36
  42:   <expression-list>        ::= <expression> #37 <expression-list-tail>
  43:   <expression-list-tail>   ::= COMMA <expression> #37 <expression-list-tail>
  44:                            ::=  
  45:   <expression>             ::= <simple-expression> <expression-tail>
  46:   <expression-tail>        ::= relop #38 <simple-expression> #39
  47:                            ::=  
  48:   <simple-expression>      ::= <term> <simple-expression-tail>
  49:                            ::= <sign> #40 <term> #41 <simple-expression-tail>
  50:   <simple-expression-tail> ::= addop #42 <term> #43 <simple-expression-tail>
  51:                            ::=  
  52:   <term>                   ::= <factor> <term-tail>
  53:   <term-tail>              ::= mulop #44 <factor> #45 <term-tail>
  54:                            ::=  
  55:   <factor>                 ::= identifier #46 <factor-tail>
  56:                            ::= <constant> #46
  57:                            ::= LPAREN <expression> RPAREN
  58:                            ::= not <factor> #47
  59:   <factor-tail>            ::= <actual-parameters>
  60:                            ::= <subscript> #48
  61:   <actual-parameters>      ::= #49 LPAREN <expression-list> RPAREN #50
  62:                            ::= #52
  63:   <sign>                   ::= unaryplus 
  64:                            ::= unaryminus 
  65:   <Goal>                   ::= <program> endmarker
  66:   <constant>               ::= intconstant
  67:                            ::= realconstant
